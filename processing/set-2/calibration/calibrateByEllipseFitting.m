function [correction, xc, yc, zc] = calibrateByEllipseFitting(x, y, z)
% Derive sensor calibration data from ellipsoidal raw sensor data points.
%
%   calibrateByEllipseFitting( x, y, z )
%   [correction] = calibrateByEllipseFitting( x, y, z )
%   [correction, xc, yc, zc] = calibrateByEllipseFitting( x, y, z )
%
% Parameters:
% * x y z        - Cartesian data, three n x 1 vectors
%
% Output:
% * correction   - (optional) 4x4 affine transformation matrix with 
%                  skew and offset correction
% * xc yc zc     - (optional) corrected input values
%
% If no output argument is given, the raw and corrected sensor data will
% be displayed in a plot.
%
    % in case of plotting
    global ellipseFittingLink

    % include Yury Petrov's ellipsoid fit
    path(fullfile(fileparts(which(mfilename)), 'ellipsoid_fit'), path);

    % fit ellipse
    [center, radii, evecs, ~] = ellipsoid_fit([x y z]);

    % get reference axes
    X = [1 0 0];
    Y = [0 1 0];
    Z = [0 0 1];

    % build direction cosine matrix that describes the rotation
    % from the reference axes to the rotated ellipse axes
    DCM = [ dot(X, evecs(:,1)), dot(X, evecs(:,2)), dot(X, evecs(:,3));
            dot(Y, evecs(:,1)), dot(Y, evecs(:,2)), dot(Y, evecs(:,3));
            dot(Z, evecs(:,1)), dot(Z, evecs(:,2)), dot(Z, evecs(:,3))];

    % get rotation back to unit axes by inverting the DCM
    R = DCM;

    % get scaling matrix
    radius = mean(radii);
    S = [radius/radii(1) 0 0;
         0 radius/radii(2) 0;
         0 0 radius/radii(3)];

    % transformation
    % note that we multiply from right, i.e. 
    %   step 1) un-rotate (R')
    %   step 2) scale (S)
    %   step 3) rotate back to original orientation (R)
    A = R * S * R';

    % build affine transformation matrix
    correction = eye(4);
    correction(1:3, 1:3) = A;
    correction(1:3, 4) = -center;

    if nargout == 0
        disp('Affine sensor correction matrix:');
        disp(num2str(correction));
    end

    if nargout == 0 || nargout == 4
        % transform all data points
        xc = x;
        yc = y;
        zc = z;
        for n=1:size(x,1)
            % build affine vector
            v = [x(n); y(n); z(n); 1];

            % apply affine correction matrix
            v = correction * v;

            xc(n) = v(1);
            yc(n) = v(2);
            zc(n) = v(3);
        end
    end
        
    %% Plot if no output arguments are given
    if nargout == 0
        
        figureHandle = figure('Name', 'Sensor Calibration / Ellipse Fitting', ...
            'NumberTitle', 'off', ...
            'Color', [0.027 0.211 0.259] ...
            );

        % define base colors
        lineColor(1, :) = [1 0.25 0]; % x axis
        lineColor(2, :) = [0.5 1 0]; % y axis
        lineColor(3, :) = [0 0.5 1]; % z axis
        lineColor(4, :) = [1 1 1];
        axesColor = [0.473 0.473 0.473];
        plotBackground = [0.15 0.15 0.15];
        titleColor = [1 1 1];

        axisCompass(1) = subplot(1, 2, 1, ...
            'Parent', figureHandle, ...
            'XGrid', 'on', ...
            'XColor', lineColor(1, :), ...
            'YGrid', 'on', ...
            'YColor', lineColor(2, :), ...
            'ZGrid', 'on', ...
            'ZColor', lineColor(3, :), ...
            'Color', plotBackground ...
            );

        axisCompass(2) = subplot(1, 2, 2, ...
            'Parent', figureHandle, ...
            'XGrid', 'on', ...
            'XColor', lineColor(1, :), ...
            'YGrid', 'on', ...
            'YColor', lineColor(2, :), ...
            'ZGrid', 'on', ...
            'ZColor', lineColor(3, :), ...
            'Color', plotBackground ...
            );

        title('Raw Sensor Data', ...
            'Parent', axisCompass(1), ...
            'Color', titleColor ...
            );

        title('Compensated Sensor Data', ...
            'Parent', axisCompass(2), ...
            'Color', titleColor ...
            );

        % plot raw points
        
        line(x, ...
             y, ...
             z, ...
            'Parent', axisCompass(1), ...
            'LineStyle', 'none', ...
            'Marker', '.', ...
            'Color', [0.8 0.8 0.8], ...
            'MarkerSize', 1);
        hold on;

        axis(axisCompass, 'square');
        xlabel(axisCompass(1), 'x'); xlim(axisCompass(1), [-2*radius 2*radius]); 
        ylabel(axisCompass(1), 'y'); ylim(axisCompass(1), [-2*radius 2*radius]); 
        zlabel(axisCompass(1), 'z'); zlim(axisCompass(1), [-2*radius 2*radius]);
        view(axisCompass(1), 3);
        ellipseFittingLink = linkprop(axisCompass, 'CameraPosition');

        % plot compensated
        line(xc, ...
             yc, ...
             zc, ...
            'Parent', axisCompass(2), ...
            'LineStyle', 'none', ...
            'Marker', '.', ...
            'Color', [0.8 0.8 0.8], ...
            'MarkerSize', 1);
        hold on;

        axis square
        xlabel(axisCompass(2), 'x'); xlim(axisCompass(2), [-2*radius 2*radius]); 
        ylabel(axisCompass(2), 'y'); ylim(axisCompass(2), [-2*radius 2*radius]); 
        zlabel(axisCompass(2), 'z'); zlim(axisCompass(2), [-2*radius 2*radius]);
        view(axisCompass(2), 3);
        rotate3d;

        % Plot Semi-Axes for raw points

        % prepare semi-axis plots
        semiaxis(1, :) = evecs(:,1) * radii(1);
        semiaxis(2, :) = evecs(:,2) * radii(2);
        semiaxis(3, :) = evecs(:,3) * radii(3);
        semiaxisVectorEnd(1, :) = evecs(:,1);
        semiaxisVectorEnd(2, :) = evecs(:,2);
        semiaxisVectorEnd(3, :) = evecs(:,3);

        % plot semi-axes
        line( [0 semiaxis(1,1)] + center(1), ...
              [0 semiaxis(1,2)] + center(2), ...
              [0 semiaxis(1,3)] + center(3), ...
              'Parent', axisCompass(1), ...
              'Color', lineColor(3, :), ...
              'LineWidth', 2)
        line( [0 semiaxis(2,1)] + center(1), ...
              [0 semiaxis(2,2)] + center(2), ...
              [0 semiaxis(2,3)] + center(3), ...
              'Parent', axisCompass(1), ...
              'Color', lineColor(2, :), ...
              'LineWidth', 2)
        line( [0 semiaxis(3,1)] + center(1), ...
              [0 semiaxis(3,2)] + center(2), ...
              [0 semiaxis(3,3)] + center(3), ...
              'Parent', axisCompass(1), ...
              'Color', lineColor(1, :), ...
              'LineWidth', 2)

        % plot semi-axis vectors
        line( [semiaxis(1, 1) semiaxisVectorEnd(1,1)] + center(1), ...
              [semiaxis(1, 2) semiaxisVectorEnd(1,2)] + center(2), ...
              [semiaxis(1, 3) semiaxisVectorEnd(1,3)] + center(3), ...
              'LineStyle', ':', ...
              'Parent', axisCompass(1), ...
              'Color', lineColor(3, :), ...
              'LineWidth', 2)
        line( [semiaxis(2, 1) semiaxisVectorEnd(2,1)] + center(1), ...
              [semiaxis(2, 2) semiaxisVectorEnd(2,2)] + center(2), ...
              [semiaxis(2, 3) semiaxisVectorEnd(2,3)] + center(3), ...
              'LineStyle', ':', ...
              'Parent', axisCompass(1), ...
              'Color', lineColor(2, :), ...
              'LineWidth', 2)
        line( [semiaxis(3, 1) semiaxisVectorEnd(3,1)] + center(1), ...
              [semiaxis(3, 2) semiaxisVectorEnd(3,2)] + center(2), ...
              [semiaxis(3, 3) semiaxisVectorEnd(3,3)] + center(3), ...
              'LineStyle', ':', ...
              'Parent', axisCompass(1), ...
              'Color', lineColor(1, :), ...
              'LineWidth', 2)

        % Plot Semi-Axes for calibrated points

        % prepare semi-axis plots
        semiaxis(1, :) = A * evecs(:,1) * radii(1);
        semiaxis(2, :) = A * evecs(:,2) * radii(2);
        semiaxis(3, :) = A * evecs(:,3) * radii(3);
        semiaxisVectorEnd(1, :) = evecs(:,1);
        semiaxisVectorEnd(2, :) = evecs(:,2);
        semiaxisVectorEnd(3, :) = evecs(:,3);

        % plot semi-axes
        line( [0 semiaxis(1,1)], ...
              [0 semiaxis(1,2)], ...
              [0 semiaxis(1,3)], ...
              'Parent', axisCompass(2), ...
              'Color', lineColor(3, :), ...
              'LineWidth', 2)
        line( [0 semiaxis(2,1)], ...
              [0 semiaxis(2,2)], ...
              [0 semiaxis(2,3)], ...
              'Parent', axisCompass(2), ...
              'Color', lineColor(2, :), ...
              'LineWidth', 2)
        line( [0 semiaxis(3,1)], ...
              [0 semiaxis(3,2)], ...
              [0 semiaxis(3,3)], ...
              'Parent', axisCompass(2), ...
              'Color', lineColor(1, :), ...
              'LineWidth', 2)

        % plot semi-axis vectors
        line( [semiaxis(1, 1) semiaxisVectorEnd(1,1)], ...
              [semiaxis(1, 2) semiaxisVectorEnd(1,2)], ...
              [semiaxis(1, 3) semiaxisVectorEnd(1,3)], ...
              'LineStyle', ':', ...
              'Parent', axisCompass(2), ...
              'Color', lineColor(3, :), ...
              'LineWidth', 2)
        line( [semiaxis(2, 1) semiaxisVectorEnd(2,1)], ...
              [semiaxis(2, 2) semiaxisVectorEnd(2,2)], ...
              [semiaxis(2, 3) semiaxisVectorEnd(2,3)], ...
              'LineStyle', ':', ...
              'Parent', axisCompass(2), ...
              'Color', lineColor(2, :), ...
              'LineWidth', 2)
        line( [semiaxis(3, 1) semiaxisVectorEnd(3,1)], ...
              [semiaxis(3, 2) semiaxisVectorEnd(3,2)], ...
              [semiaxis(3, 3) semiaxisVectorEnd(3,3)], ...
              'LineStyle', ':', ...
              'Parent', axisCompass(2), ...
              'Color', lineColor(1, :), ...
              'LineWidth', 2)
    end
end