clear all; home;

%% Load the data
%dataSetFolder = fullfile(fileparts(which(mfilename)), '..' , '..', 'data', 'set-2', 'roll-and-tilt-at-45-90');
%dataSetFolder = fullfile(fileparts(which(mfilename)), '..' , '..', 'data', 'set-2', 'unmoved-with-x-pointing-forward');
dataSetFolder = fullfile(fileparts(which(mfilename)), '..' , '..', 'data', 'set-2', 'rotate-ccw-around-x-pointing-forward');
%dataSetFolder = fullfile(fileparts(which(mfilename)), '..' , '..', 'data', 'set-2', 'rotate-ccw-around-y-pointing-left');
%dataSetFolder = fullfile(fileparts(which(mfilename)), '..' , '..', 'data', 'set-2', 'rotate-ccw-around-x-pointing-up');
%dataSetFolder = fullfile(fileparts(which(mfilename)), '..' , '..', 'data', 'set-2', 'rotate-ccw-around-z-pointing-up');
[accelerometer, gyroscope, compass, ~] = loadData(dataSetFolder, true);

% resample the time series
[acceleration, gyroscope, compass] = lerpTimeSeries(accelerometer, gyroscope, compass);

% extract time vector
time = acceleration.Time;
N = acceleration.Length;

N = min(N, 10000);
time = time(1:N);

% Preparing orientation quaternion
path(fullfile(fileparts(which(mfilename)), 'quaternion'), path);
previous_orientation = [1 0 0 0];

%% Get roll, pitch and yaw
hwb = waitbar(0, 'Calculating states ...');

ypr = zeros(N, 3);
ypr2 = zeros(N, 3);
ypr_kf = zeros(N, 3);
ypr_gyro = zeros(N, 3);
omega_kf = zeros(N, 3);

oldDCM = zeros(3);
ypr_base = [0 0 0];

x = zeros(9, 1);

%{
figure;
subplot(1,1,1);
qax = quiver3(0, 0, 0, 0, 0, 0);
axis square;
xlim([-1 1]);
ylim([-1 1]);
zlim([-1 1]);
%}

for i=1:N
    % fetch RPY from accelerometer and magnetometer
    a = acceleration.Data(i, :);
    m = compass.Data(i, :);
    
    [yaw, pitch, roll, DCM, coordinateSystem, ~] = yawPitchRoll(a, m);
    
    current_ypr = [yaw, pitch, roll];
    ypr(i,:) = current_ypr;
    
    % get time derivative
    T = 0.1;
    gyro_current     = [0 0 0];
    ypr_gyro_current = [0 0 0];
    if i > 1
        T = gyroscope.Time(i) - gyroscope.Time(i-1);
        
        gyro_current = [-gyroscope.Data(i,1) -gyroscope.Data(i,2) gyroscope.Data(i,3)];
        ypr_gyro_current = [gyro_current(3) gyro_current(2) gyro_current(1)];
        ypr_gyro(i, :) = ypr_gyro(i-1, :) + ypr_gyro_current * T;
    end
    
    % Get orientation quaternion from DCM
    if i > 1
        current_orientation = quaternionFromRotation(DCM);
        omega = quaternionToAngularVelocity(current_orientation, previous_orientation, T);   
        previous_orientation = current_orientation;
        
        %ypr2(i, :) = ypr2(i-1, :) + omega;
                
        qw = current_orientation(1);
        qx = current_orientation(2);
        qy = current_orientation(3);
        qz = current_orientation(4);
        
        %{
        % this one has a singularity at yaw +/- 90°
        qpitch1  = atan2d(2*qy*qw-2*qx*qz , 1 - 2*qy^2 - 2*qz^2);
        qyaw1    = asind(2*qx*qy + 2*qz*qw);
        qroll1   = atan2d(2*qx*qw-2*qy*qz , 1 - 2*qx^2 - 2*qz^2);
        
        % this one has a singularity at pitch +/- 90°
        % it performs exceptionally bad at pitch +/- 90° and should not be
        % used to estimate anything under these conditions.
        qroll2   = -atan2d(-2*qy*qz-2*qx*qw , 1 - 2*qx^2 - 2*qy^2);
        qpitch2  =  asind(2*qx*qz + 2*qy*qw);
        qyaw2    = -atan2d(-2*qx*qy-2*qz*qw , 1 - 2*qy^2 - 2*qz^2);
        
        %}
               
        %ypr2(i, :) = [qyaw1, qpitch1, qroll1];
    end

    % Fetch base vectors
    zbase = a / norm(a);
    xbase = m / norm(m);

    % The first coordinate system is aligned with the accelerometer reading
    y1 = cross(xbase, zbase);
    y1 = y1/norm(y1);
    
    x1 = cross(zbase, y1);    % Y is normalised because of Z and Y
    x1 = x1/norm(x1);
    
    z1 = cross(x1, y1);
    z1 = z1/norm(z1);
    
    q1 = quaternionFromRotation([x1; y1; z1]);
    

    % The second coordinate system is aligned with the magnetometer
    y2 = cross(xbase, zbase);
    y2 = y2/norm(y2);
        
    z2 = cross(xbase, y2);
    z2 = z2/norm(z2);
    
    x2 = cross(y2, z2);
    x2 = x2/norm(x2);
    

    q2 = quaternionFromRotation([x2; y2; z2]);
    
    % find difference quaternion
    q3 = quaternionMul(q1, quaternionInv(q2));
    
    qw = q3(1);
    qx = q3(2);
    qy = q3(3);
    qz = q3(4);
    
    % calculate angular displacement
    dqp  = atan2d(2*qy*qw-2*qx*qz , 1 - 2*qy^2 - 2*qz^2);
    %dqy  = asind(2*qx*qy + 2*qz*qw);
    %dqe  = atan2d(2*qx*qw-2*qy*qz , 1 - 2*qx^2 - 2*qz^2);
    
%}    
%{   
    DCM = [0            0            1;
          0            1            0;
         -1            0            0 ] * DCM;
         %}
    
    %DCM = [x2; y2; z2]';

    % extract angles
    % see: William Premerlani, "Computing Euler Angles from Direction Cosines"   
    %{
    qpitch2 =  asind(DCM(1, 3));
    qroll2  = -atan2d(DCM(2, 3)/cosd(qpitch2), DCM(3, 3)/cosd(qpitch2));
    qyaw2   =  atan2d(DCM(1, 2), DCM(1, 1));
    %}
    
    %qroll2 = atan2d(DCM(2,3), DCM(3,3));
    %c2 = sqrt(DCM(1,1)^2 + DCM(1,2)^2);
    %qpitch2 = atan2d(-DCM(1,3), c2);
    %s1 = sind(qroll2);
    %c1 = cosd(qroll2);
    %qyaw2 = atan2d(s1 * DCM(3,1) - c1*DCM(2,1), c1*DCM(2,2) - s1*DCM(3,1));

    qyaw2   = NaN;
    qpitch2 = -acosd(dot(z1, [0 0 1]));
    qroll2  = NaN;
    
    %current_ypr
    ypr2(i, :) = [qyaw2, qpitch2, qroll2];
    
    %{
    if exist('lol', 'var')
       delete(lol);
    end
    
    lol(1) = quiver3(0, 0, 0, accelerometer.Data(i,1), accelerometer.Data(i,2), accelerometer.Data(i,3), 'Color', [1 0 0], 'Parent', qax);
    lol(2) = quiver3(0, 0, 0, compass.Data(i,1), compass.Data(i,2), compass.Data(i,3), 'Color', [0 1 0], 'Parent', qax);
    
    lol(3) = quiver3(0, 0, 0, x1(1), x1(2), x1(3), 'Color', [0 0 1], 'LineWidth', 2, 'Parent', qax);
    lol(4) = quiver3(0, 0, 0, y1(1), y1(2), y1(3), 'Color', [0 0 1], 'LineWidth', 2, 'Parent', qax);
    lol(5) = quiver3(0, 0, 0, z1(1), z1(2), z1(3), 'Color', [0 0 1], 'LineWidth', 2, 'Parent', qax);
    
    lol(6) = quiver3(0, 0, 0, x2(1), x2(2), x2(3), 'Color', [1 0 1], 'LineWidth', 2, 'Parent', qax);
    lol(7) = quiver3(0, 0, 0, y2(1), y2(2), y2(3), 'Color', [1 0 1], 'LineWidth', 2, 'Parent', qax);
    lol(8) = quiver3(0, 0, 0, z2(1), z2(2), z2(3), 'Color', [1 0 1], 'LineWidth', 2, 'Parent', qax);
    %}
    
    % store state
    ypr_kf(i, :)    = [x(1)  x(2)  x(3)];
    omega_kf(i, :)  = [x(4), x(5), x(6)];
     
    waitbar(i/N, hwb);
end
close(hwb);

% clamp angles to -180..180
ypr2 = clampangle(ypr2);
ypr_gyro = clampangle(ypr_gyro);
ypr_kf = clampangle(ypr_kf);


%% Plot data
figureHandle = figure('Name', 'Raw and derived inertial sensor data', ...
    'NumberTitle', 'off', ...
    'Color', [0.027 0.211 0.259] ...
    );

% define base colors
lineColor(1, :) = [1 0.25 0]; % x axis
lineColor(2, :) = [0.5 1 0]; % y axis
lineColor(3, :) = [0 0.5 1]; % z axis

lineColor(4, :) = [1 1 0]; % x axis
lineColor(5, :) = [1 0 1]; % y axis
lineColor(6, :) = [1.0 0.75 0.25]; % z axis

meanColor = [1 1 1];
axesColor = [0.473 0.473 0.473];
plotBackground = [0.15 0.15 0.15];
titleColor = [1 1 1];


%% Roll
axisRpy(1) = subplot(3, 3, 1, ...
    'Parent', figureHandle, ...
    'XGrid', 'on', ...
    'XColor', axesColor, ...
    'YGrid', 'on', ...
    'YColor', axesColor, ...
    'Color', plotBackground ...
    );

t = time;
roll = ypr(:, 3);
line(t, roll, ...
    'Parent', axisRpy(1), ...
    'LineStyle', 'none', ...
    'Marker', '.', ...
    'MarkerSize', 2, ...
    'Color', lineColor(4, :) ...
    ); 
hold on;
roll = ypr2(:, 3);
line(t, roll, ...
    'Parent', axisRpy(1), ...
    'LineStyle', 'none', ...
    'Marker', '.', ...
    'MarkerSize', 2, ...
    'Color', [1 1 1] ...
    ); 

xlim([0 t(end)]);
ylim([-180 180]);

title('Roll', ...
    'Color', titleColor ...
    );
ylabel('angle [\circ]');
xlabel('t [s]');
legendHandle = legend('DCM raw', 'Quaternion');
set(legendHandle, 'TextColor', [1 1 1]);

%% Pitch
axisRpy(2) = subplot(3, 3, 4, ...
    'Parent', figureHandle, ...
    'XGrid', 'on', ...
    'XColor', axesColor, ...
    'YGrid', 'on', ...
    'YColor', axesColor, ...
    'Color', plotBackground ...
    );

t = time;
pitch = ypr(:, 2);
line(t, pitch, ...
    'Parent', axisRpy(2), ...
    'LineStyle', 'none', ...
    'Marker', '.', ...
    'MarkerSize', 2, ...
    'Color', lineColor(5, :) ...
    ); 
hold on;
pitch = ypr2(:, 2);
line(t, pitch, ...
    'Parent', axisRpy(2), ...
    'LineStyle', 'none', ...
    'Marker', '.', ...
    'MarkerSize', 2, ...
    'Color', [1 1 1] ...
    ); 

xlim([0 t(end)]);
ylim([-180 180]);

title('Pitch (elevation)', ...
    'Color', titleColor ...
    );
ylabel('angle [\circ]');
xlabel('t [s]');
legendHandle = legend('DCM raw', 'Quaternion');
set(legendHandle, 'TextColor', [1 1 1]);

%% Yaw
axisRpy(3) = subplot(3, 3, 7, ...
    'Parent', figureHandle, ...
    'XGrid', 'on', ...
    'XColor', axesColor, ...
    'YGrid', 'on', ...
    'YColor', axesColor, ...
    'Color', plotBackground ...
    );

t = time;
yaw = ypr(:, 1);
line(t, yaw, ...
    'Parent', axisRpy(3), ...
    'LineStyle', 'none', ...
    'Marker', '.', ...
    'MarkerSize', 2, ...
    'Color', lineColor(6, :) ...
    ); 
hold on;
yaw = ypr2(:, 1);
line(t, yaw, ...
    'Parent', axisRpy(3), ...
    'LineStyle', 'none', ...
    'Marker', '.', ...
    'MarkerSize', 2, ...
    'Color', [1 1 1] ...
    ); 

xlim([0 t(end)]);
ylim([-180 180]);

title('Yaw (azimuth, heading)', ...
    'Color', titleColor ...
    );
ylabel('angle [\circ]');
xlabel('t [s]');
legendHandle = legend('DCM raw', 'Quaternion');
set(legendHandle, 'TextColor', [1 1 1]);


%% Roll
axisRpy(4) = subplot(3, 3, 2, ...
    'Parent', figureHandle, ...
    'XGrid', 'on', ...
    'XColor', axesColor, ...
    'YGrid', 'on', ...
    'YColor', axesColor, ...
    'Color', plotBackground ...
    );

t = time;
roll = ypr_gyro(:, 3);
line(t, roll, ...
    'Parent', axisRpy(4), ...
    'LineStyle', 'none', ...
    'Marker', '.', ...
    'MarkerSize', 2, ...
    'Color', lineColor(4, :) ...
    );  
hold on;
roll = ypr_kf(:, 3);
line(t, roll, ...
    'Parent', axisRpy(4), ...
    'LineStyle', 'none', ...
    'Marker', '.', ...
    'MarkerSize', 2, ...
    'Color', [1 1 1] ...
    );

xlim([0 t(end)]);
ylim([-180 180]);

title('Roll', ...
    'Color', titleColor ...
    );
ylabel('angle [\circ]');
xlabel('t [s]');
legendHandle = legend('gyro int', 'kf');
set(legendHandle, 'TextColor', [1 1 1]);

%% Pitch
axisRpy(5) = subplot(3, 3, 5, ...
    'Parent', figureHandle, ...
    'XGrid', 'on', ...
    'XColor', axesColor, ...
    'YGrid', 'on', ...
    'YColor', axesColor, ...
    'Color', plotBackground ...
    );

t = time;
pitch = ypr_gyro(:, 2);
line(t, pitch, ...
    'Parent', axisRpy(5), ...
    'LineStyle', 'none', ...
    'Marker', '.', ...
    'MarkerSize', 2, ...
    'Color', lineColor(5, :) ...
    ); 
hold on;
pitch = ypr_kf(:, 2);
line(t, pitch, ...
    'Parent', axisRpy(5), ...
    'LineStyle', 'none', ...
    'Marker', '.', ...
    'MarkerSize', 2, ...
    'Color', [1 1 1] ...
    );

xlim([0 t(end)]);
ylim([-180 180]);

title('Pitch (elevation)', ...
    'Color', titleColor ...
    );
ylabel('angle [\circ]');
xlabel('t [s]');
legendHandle = legend('gyro int', 'kf');
set(legendHandle, 'TextColor', [1 1 1]);

%% Yaw
axisRpy(6) = subplot(3, 3, 8, ...
    'Parent', figureHandle, ...
    'XGrid', 'on', ...
    'XColor', axesColor, ...
    'YGrid', 'on', ...
    'YColor', axesColor, ...
    'Color', plotBackground ...
    );

t = time;
yaw = ypr_gyro(:, 1);
line(t, yaw, ...
    'Parent', axisRpy(6), ...
    'LineStyle', 'none', ...
    'Marker', '.', ...
    'MarkerSize', 2, ...
    'Color', lineColor(6, :) ...
    ); 
hold on;
yaw = ypr_kf(:, 1);
line(t, yaw, ...
    'Parent', axisRpy(6), ...
    'LineStyle', 'none', ...
    'Marker', '.', ...
    'MarkerSize', 2, ...
    'Color', [1 1 1] ...
    );

xlim([0 t(end)]);
ylim([-180 180]);

title('Yaw (azimuth, heading)', ...
    'Color', titleColor ...
    );
ylabel('angle [\circ]');
xlabel('t [s]');
legendHandle = legend('gyro int', 'kf');
set(legendHandle, 'TextColor', [1 1 1]);



%% Roll
axisRpy(7) = subplot(3, 3, 3, ...
    'Parent', figureHandle, ...
    'XGrid', 'on', ...
    'XColor', axesColor, ...
    'YGrid', 'on', ...
    'YColor', axesColor, ...
    'Color', plotBackground ...
    );

t = time;
roll = -gyroscope.Data(1:N,1);
line(t, roll, ...
    'Parent', axisRpy(7), ...
    'LineStyle', 'none', ...
    'Marker', '.', ...
    'MarkerSize', 2, ...
    'Color', lineColor(4, :) ...
    ); 
hold on;
roll = omega_kf(1:N,3);
line(t, roll, ...
    'Parent', axisRpy(7), ...
    'LineStyle', 'none', ...
    'Marker', '.', ...
    'MarkerSize', 2, ...
    'Color', [1 1 1] ...
    ); 

xlim([0 t(end)]);
ylim([-180 180]);

title('Roll', ...
    'Color', titleColor ...
    );
ylabel('angle [\circ]');
xlabel('t [s]');
legendHandle = legend('gyro', 'gyro_{kf}');
set(legendHandle, 'TextColor', [1 1 1]);

%% Pitch
axisRpy(8) = subplot(3, 3, 6, ...
    'Parent', figureHandle, ...
    'XGrid', 'on', ...
    'XColor', axesColor, ...
    'YGrid', 'on', ...
    'YColor', axesColor, ...
    'Color', plotBackground ...
    );

t = time;
pitch = -gyroscope.Data(1:N,2);
line(t, pitch, ...
    'Parent', axisRpy(8), ...
    'LineStyle', 'none', ...
    'Marker', '.', ...
    'MarkerSize', 2, ...
    'Color', lineColor(5, :) ...
    ); 
hold on;
pitch = omega_kf(1:N,2);
line(t, pitch, ...
    'Parent', axisRpy(8), ...
    'LineStyle', 'none', ...
    'Marker', '.', ...
    'MarkerSize', 2, ...
    'Color', [1 1 1] ...
    ); 

xlim([0 t(end)]);
ylim([-180 180]);

title('Pitch (elevation)', ...
    'Color', titleColor ...
    );
ylabel('angle [\circ]');
xlabel('t [s]');
legendHandle = legend('gyro', 'gyro_{kf}');
set(legendHandle, 'TextColor', [1 1 1]);

%% Yaw
axisRpy(9) = subplot(3, 3, 9, ...
    'Parent', figureHandle, ...
    'XGrid', 'on', ...
    'XColor', axesColor, ...
    'YGrid', 'on', ...
    'YColor', axesColor, ...
    'Color', plotBackground ...
    );

t = time;
yaw = gyroscope.Data(1:N,3);
line(t, yaw, ...
    'Parent', axisRpy(9), ...
    'LineStyle', 'none', ...
    'Marker', '.', ...
    'MarkerSize', 2, ...
    'Color', lineColor(6, :) ...
    ); 
hold on;
yaw = omega_kf(1:N,1);
line(t, yaw, ...
    'Parent', axisRpy(9), ...
    'LineStyle', 'none', ...
    'Marker', '.', ...
    'MarkerSize', 2, ...
    'Color', [1 1 1] ...
    ); 

xlim([0 t(end)]);
ylim([-180 180]);

title('Yaw (azimuth, heading)', ...
    'Color', titleColor ...
    );
ylabel('angle [\circ]');
xlabel('t [s]');
legendHandle = legend('gyro', 'gyro_{kf}');
set(legendHandle, 'TextColor', [1 1 1]);



%% Plot refining
% link the axes
linkaxes(axisRpy, 'xy');